(window.webpackJsonp=window.webpackJsonp||[]).push([[12],{170:function(e,t,o){"use strict";var n={props:["title","published","updated","archived"],head:function(){return{title:this.title}}},r=o(8),component=Object(r.a)(n,(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("div",[o("h1",{staticClass:"title",attrs:{itemprop:"name headline"}},[e._v(e._s(e.title))]),e._v(" "),o("div",{staticClass:"time"},[e._v("Published: "),o("time",{attrs:{itemprop:"datePublished"}},[e._v(e._s(e.published))])]),e._v(" "),e.updated?o("div",{staticClass:"time"},[e._v("Updated: "),o("time",{attrs:{itemprop:"dateModified"}},[e._v(e._s(e.updated))])]):e._e(),e._v(" "),e.archived?o("div",{staticClass:"block"},[e._v("Note: This is an archived post. Information may not be relevant now.")]):e._e()])}),[],!1,null,null,null);t.a=component.exports},184:function(e,t,o){"use strict";o.r(t);var n=o(170),r={mixins:[n.a],components:{BlogTitle:n.a}},l=o(8),component=Object(l.a)(r,(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("article",{attrs:{itemprop:"blogPost",itemscope:"",itemtype:"https://schema.org/BlogPosting"}},[o("BlogTitle",{attrs:{title:"Creating a multi-boot disc with ISOLINUX",published:"02 Oct 2010",archived:"true"}}),e._v(" "),o("div",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"content",attrs:{itemprop:"articleBody"}},[e._m(0),e._v(" "),e._m(1),e._v(" "),e._m(2),e._v(" "),e._m(3),e._v(" "),e._m(4),e._v(" "),e._m(5),e._v(" "),e._m(6),e._v(" "),o("p",[e._v("\n        Also. for testing purposes, we set up a virtual machine. VirtualBox or\n        Qemu should be the best option.\n      ")]),e._v(" "),e._m(7),e._v(" "),e._m(8),e._v(" "),e._m(9),e._v(" "),e._m(10),e._v(" "),e._m(11),e._v(" "),o("p",[e._v("\n        Similar should have been the ways of integration for most OSes. But,\n        unfortunately different techniques are used by different OSes making our\n        job difficult. Ubuntu Desktop Edition and openSUSE use gfxboot which I\n        couldn’t load directly from vesamenu.c32 (Error setting up gfxboot, or\n        something like that was returned as error, there has to be a way). So,\n        we need to create submenus for them ( not a difficult job, if you are\n        good with GRUB or any other bootloader) and create entries for them in\n        the main menu. Boot files of Ubuntu were copied to /boot/ubuntu. The\n        boot files of openSUSE exist in /boot/i386/loader which was let in its\n        own location. isolinux.cfg was edited to and absolute path of file names\n        were written. This step is necessary with every distro integration\n        because our bootloader searches the files in its own folder otherwise.\n      ")]),e._v(" "),e._m(12),e._v(" "),o("p",[e._v("\n        Integrating UBCD is easy. We just need to point the sub-menu to\n        /ubcd/menus/isolinux/main.cfg.\n      ")]),e._v(" "),o("p",[e._v("\n        UBCD has Parted Magic inside it. If you need to integrate Parted Magic\n        by yourself because you don’t want UBCD or if you want the latest\n        version, then you can copy /boot/isolinux from Parted Magic ISO to\n        /boot/pmagic, similar to what we did with DSL. Copy other contents into\n        our working directory (pmagic is the only other folder). Edit the\n        /boot/pmagic/isolinux.cfg file like we did for DSL and then point to\n        this menu from /boot/isolinux/isolinux.cfg. We can also edit the UBCD\n        menu to link to the updated Parted Magic.\n      ")]),e._v(" "),o("p",[e._v("\n        GeexBox is a wonderful under 20 MB complete multimedia OS. Its ISO has\n        only folder /GEEXBOX in it. Copy it into our multi-boot DVD root. Its\n        isolinux configuration files are located in /GEEXBOX/boot. We edit\n        /GEEXBOX/boot/isolinux.cfg to use absolute path for kernel and initrd\n        files. We also add it into our menu /boot/isolinux/isolinux.cfg.\n      ")]),e._v(" "),e._m(13),e._v(" "),e._m(14),e._v(" "),o("p",[e._v("Make the changes, execute mkiso and boot the image.")]),e._v(" "),e._m(15),e._v(" "),o("p",[e._v("\n        This document has not been written to deep details and therefore may not\n        be useful to beginners. Also, this job has no huge complexibility that\n        it requires an advanced user. This how-to was written\n        as a part of documentation for the DVD release of happyBoot v3 done in\n        Software Freedom Day 2010 organised by Nepal Open Source Klub.\n      ")]),e._v(" "),e._m(16),e._v(" "),e._m(17)])],1)}),[function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[o("img",{attrs:{src:"/media/posts/happyboot_logo.jpg",alt:"happyBoot Logo"}}),o("br"),e._v("\n        This how-to is created during the course of documentation of happyBoot\n        v3.0.5 Beta released during the grand celebration of Software Freedom\n        Day 2010 by NOSK.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        Let us start with creating a directory where the content and image shall\n        be built."),o("br"),e._v("\n        Inside the folder you have created, create another directory ‘root’ to\n        represent the root of the DVD we are building. This directory is our\n        working directory.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        Download the latest syslinux source tar file from kernel.org:"),o("br"),e._v(" "),o("a",{attrs:{href:"http://www.kernel.org/pub/linux/utils/boot/syslinux/",title:"Download syslinux!",target:"_blank"}},[e._v("http://www.kernel.org/pub/linux/utils/boot/syslinux/")])])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        Inside our working directory, create /boot folder."),o("br"),e._v("\n        /boot shall hold files related to booting, i.e. the boot menus, kernels,\n        initial ramdisks, etc."),o("br"),e._v("\n        /boot/isolinux shall hold isolinux files.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        Extract the downloaded syslinux archive, find the following files. and\n        copy them to "),o("code",[e._v("/boot/isolinux.")]),o("br"),e._v(" "),o("pre",{staticClass:"language-isolinux"},[o("code",[e._v("chain.c32\nisolinux.bin\nmemdisk\nmenu.c32\nvesamenu.c32\nreboot.c32")])])])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        isolinux.bin is the boot loader file. "),o("code",[e._v("menu.c32")]),e._v(" is required only if we\n        are creating the menu in normal mode where background images and other\n        graphical options are not possible. "),o("code",[e._v("vesamenu.c32")]),e._v(" provides support for\n        background images and other graphical options and we are using this type\n        of menu. memdisk can emulate disk images as disks. It can be used to\n        boot the system off floppy images and even smaller CD ISOs. syslinux has\n        many other files COM32 images with "),o("code",[e._v(".c32")]),e._v(" extensions which are used after\n        booting for various purposes. "),o("code",[e._v("reboot.c32")]),e._v(" is used to reboot the machine.\n        There are other files like "),o("code",[e._v("gfxboot.c32")]),e._v(" which we are not including here.\n        gfxboot supports more advanced, powerful and high-graphics menu but\n        requires complex scripting and needs them to be archived, so it’s little\n        difficult creating and testing multi-boot DVD.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        mkiso.sh script included here is the script for generating ISO image. It\n        uses mkisofs for image creation."),o("br"),e._v("\n        Edit it with your favorite text-editor to specify the location of the\n        output image after "),o("code",[e._v("-o")]),e._v(" switch and the root location of the CD (where\n        /boot/ is located) at the end of the line."),o("br"),e._v("\n        Save the scrpt in system path (e.g. /usr/bin) with executable\n        permission."),o("br"),e._v("\n        This will save our time. When we execute "),o("code",[e._v("mkiso")]),e._v(" new image will be\n        created at the specified location using "),o("code",[e._v("boot/isolinux/isolinux.bin")]),e._v(" as\n        the eltorito boot image.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        The setup is done by now."),o("br"),e._v("\n        The major work lies in integration of the distributions.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        Our first job while integrating an OS into our mult-boot DVD is to\n        understand its boot loader."),o("br"),e._v("\n        Almost all linux distributions use ISOLINUX as the bootloader. ISOLINUX\n        files are generally located at "),o("code",[e._v("/isolinux/")]),e._v(" or "),o("code",[e._v("/boot/isolinux")]),e._v(" in the boot\n        media."),o("br"),e._v("\n        I would recommend you to read the online and offline syslinux and\n        isolinux documentation and references before continuing. The offline\n        source should be the documents inside the syslinux archive which you\n        have just downloaded.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        Let’s start our integration with DSL (Damn Small Linux). We mount it’s\n        ISO image and browse to the root of its CD image. We see isolinux is\n        located in "),o("code",[e._v("/boot/isolinux")]),e._v(". We copy everything else into our working root\n        except the boot folder because /boot/isolinux would conflict with ours.\n        So, we create "),o("code",[e._v("/boot/DSL")]),e._v(" in our location where we copy the contents of\n        "),o("code",[e._v("/boot/isolinux")]),e._v(" from DSL image. Since, we have changed the location of\n        DSL boot configuration files, we have to edit "),o("code",[e._v("isolinux.cfg")]),e._v(" in "),o("code",[e._v("/boot/DSL")]),e._v("\n        and add "),o("code",[e._v("/boot/DSL")]),e._v(" to every file location. Otherwise ISOLINUX would\n        search it in "),o("code",[e._v("/boot/isolinux")]),e._v(" instead. So lines like "),o("code",[e._v("DISPLAY boot.msg")]),e._v(" are\n        edited to "),o("code",[e._v("DISPLAY /boot/dsl/boot.msg")]),e._v(", "),o("code",[e._v("KERNEL linux24")]),e._v(" to "),o("code",[e._v("KERNEL /boot/dsl/linux24")]),e._v(",\n        "),o("code",[e._v("KERNEL memtest")]),e._v(" to "),o("code",[e._v("KERNEL /boot/dsl/memtest")]),e._v(".\n        Also, we have to edit "),o("code",[e._v("initrd=minitr24.gz")]),e._v(" to "),o("code",[e._v("initrd=/boot/dsl/minitr24.gz")]),e._v(" in the "),o("code",[e._v("APPEND")]),e._v(" lines.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        Now, we are going to add an entry of Damn Small Linux in our mult-boot\n        menu. The configuration file for multi-boot menu is\n        "),o("code",[e._v("/boot/isolinux/isolinux.cfg")]),e._v("."),o("br"),e._v("\n        See the file "),o("code",[e._v("menu.txt")]),e._v(" for help and reference on ISOLINUX menu\n        configuration inside the "),o("code",[e._v("doc")]),e._v(" folder of syslinux archive."),o("br"),e._v("\n        The following lines have to be used.\n        "),o("pre",{staticClass:"language-js"},[o("code",[e._v("LABEL dsl\nMENU LABEL ^1. Damn Small Linux v4.4.10\nKERNEL vesamenu.c32\nAPPEND /boot/dsl/isolinux.cfg\nTEXT HELP")])]),e._v("\n        A 50 MB near complete Operating System for Personal Computers.\n        Includes system utilities, multimedia, office and gaming and other\n        goodies."),o("br")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[o("code",[e._v("MENU LABEL")]),e._v(" would show in the menu while booting."),o("br"),e._v("\n        Text between "),o("code",[e._v("TEXT HELP")]),e._v(" and "),o("code",[e._v("EXNDTEXT")]),e._v(" would be shown as help text in the\n        bottom."),o("br"),e._v("\n        This entry loads vesamenu.c32 COM32 Image with "),o("code",[e._v("/boot/dsl/isolinux.cfg")]),e._v(" as\n        parameter. This infact means load another ISOLINUX menu (sub-menu)."),o("br"),e._v("\n        Now, we can create the image with mkiso and test if it boots OK in\n        VirtualBox. It should."),o("br"),e._v("\n        The "),o("code",[e._v("^")]),e._v(" key before "),o("code",[e._v("1")]),e._v(", sets "),o("code",[e._v("1")]),e._v(" as the hotkey for selection of this\n        menu. Use it before any character to make the character the hot-key.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        Fedora has its boot configuration in /isolinux but kernel on /EFI (the\n        kernel and memtest in /isolinux are 0 bytes). So, all files except\n        kernel and memtest were copied to /EFI. isolinux.cfg was edited\n        accordingly and pointed in /boot/isolinux/isolinux.cfg like done for\n        DSL. Fedora kernel won’t find the live file system unless we specify the\n        append CD label to the kernel. We need to edit all "),o("code",[e._v("APPEND")]),e._v(" lines in\n        /EFI/isolinux.cfg and use "),o("code",[e._v("root=live:happyBootv3")]),e._v(" parameter (without\n        quotes). We are assuming "),o("code",[e._v("happyBootv3")]),e._v(" is the CD/DVD label name. You can\n        change it in mkiso script.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        Finally, we customize the boot menu looks."),o("br"),e._v("\n        We will look after each entry used."),o("br"),e._v(" "),o("pre",{staticClass:"language-js"},[o("code",[e._v("MENU BACKGROUND /boot/isolinux/main.jpg")])]),e._v("\n        This makes ISOLINUX load main.jpg as the background. You can use any\n        image, provided it is 640×480 JPG or PNG.\n        "),o("pre",{staticClass:"language-js"},[o("code",[e._v("MENU TITLE happyBoot v3.0b SFD10 Release")])]),e._v("\n        This sets the title.\n        "),o("pre",{staticClass:"language-js"},[o("code",[e._v("MENU COLOR title 1;36;44 #ffff0000 #00000000 std")])]),e._v("\n        Sets title foreground color to blue.\n        "),o("pre",{staticClass:"language-js"},[o("code",[e._v("MENU ROWS 14")])]),e._v("\n        Uses 14 rows for menu options."),o("br"),e._v(" "),o("pre",{staticClass:"language-js"},[o("code",[e._v("F1 /boot/docs/help.txt")])]),e._v("\n        Displays help file when F1 is hit.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        See "),o("code",[e._v("menu.txt")]),e._v(" inside doc folder in syslinux archive for more references.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        If you aren’t using mkiso script, take care:"),o("br"),e._v(" "),o("code",[e._v("mkisofs -U")]),e._v(" solves ubuntu problem of ‘unable to find live file system’\n        error."),o("br"),e._v(" "),o("code",[e._v("mkisofs -U -R")]),e._v(" solves the problem with DSL – can’t find KNOPPIX\n        filesystem problem.\n      ")])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[o("strong",[e._v("Screenshots:")]),o("br"),e._v("\n        The main menu:"),o("br"),e._v(" "),o("img",{attrs:{src:"/media/posts/main_boot_screen.jpg",alt:"happyBoot Main Menu"}})])},function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("p",[e._v("\n        One of the sub-menus (Parted Magic):"),o("br"),e._v(" "),o("img",{attrs:{src:"/media/posts/parted_magic_menu.png",alt:"happyBoot sub-menu - Parted Magic"}})])}],!1,null,null,null);t.default=component.exports}}]);