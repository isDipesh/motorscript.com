(window.webpackJsonp=window.webpackJsonp||[]).push([[21],{170:function(e,t,n){"use strict";var o={props:["title","published","updated","archived"],head:function(){return{title:this.title}}},r=n(8),component=Object(r.a)(o,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("div",[n("h1",{staticClass:"title",attrs:{itemprop:"name headline"}},[e._v(e._s(e.title))]),e._v(" "),n("div",{staticClass:"time"},[e._v("Published: "),n("time",{attrs:{itemprop:"datePublished"}},[e._v(e._s(e.published))])]),e._v(" "),e.updated?n("div",{staticClass:"time"},[e._v("Updated: "),n("time",{attrs:{itemprop:"dateModified"}},[e._v(e._s(e.updated))])]):e._e(),e._v(" "),e.archived?n("div",{staticClass:"block"},[e._v("Note: This is an archived post. Information may not be relevant now.")]):e._e()])}),[],!1,null,null,null);t.a=component.exports},193:function(e,t,n){"use strict";n.r(t);var o=n(170),r={mixins:[o.a],components:{BlogTitle:o.a}},l=n(8),component=Object(l.a)(r,(function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("article",{attrs:{itemprop:"blogPost",itemscope:"",itemtype:"https://schema.org/BlogPosting"}},[n("BlogTitle",{attrs:{title:"Enabling Persisted Storage for your web app on Chrome",published:"23 Dec 2018"}}),e._v(" "),n("div",{directives:[{name:"highlight",rawName:"v-highlight"}],staticClass:"content",attrs:{itemprop:"articleBody"}},[e._v("\n      According to Google Developer Docs, Chrome grants persistent storage\n      permissions if any of these are satisfied:\n      "),e._m(0),e._v("\n      We will use the last two options to get the permission.\n      "),e._m(1),e._v('\n      Now, your web app should print "Storage will not be cleared except by\n      explicit user action" on the console.\n    ')])],1)}),[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("\n          The site has been bookmarked in the browser and there are less than 5\n          bookmarks.\n        ")]),e._v(" "),n("li",[e._v("The site has high engagement in the browser.")]),e._v(" "),n("li",[e._v("The site is added to home screen.")]),e._v(" "),n("li",[e._v("Push notifications are enabled for the site.")])])},function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ol",[n("li",[n("h2",[e._v("Adding our app to home screen.")]),e._v(" "),n("ul",[n("li",[e._v("\n              To enable adding our site to homescreen, first add a manifest file\n              -\n              "),n("code",[e._v("manifest.json")]),e._v("\n              to the root.\n              "),n("pre",[n("code",{staticClass:"language-json"},[e._v('{\n    "short_name": "OCR GT",\n    "name": "OCR GT",\n    "icons": [\n      {\n        "src": "favicon.png",\n        "type": "image/png",\n        "sizes": "64x64"\n      },\n      {\n        "src": "awecode-512.png",\n        "type": "image/png",\n        "sizes": "512x512"\n      }\n    ],\n    "start_url": "/",\n    "background_color": "#3367D6",\n    "display": "standalone",\n    "scope": "/",\n    "theme_color": "#3367D6"\n}')])]),e._v(" "),n("div",[e._v("\n                Change the values as per your requirement. Link the manifest\n                file from your index.html. Add the following within the\n                "),n("code",[e._v("head")]),e._v(" tag.\n              ")]),e._v(" "),n("pre",[n("code",{staticClass:"language-html"},[e._v('<link rel="manifest" href="manifest.json">')])])]),e._v(" "),n("li",[n("p",[n("strong",[e._v("Note")]),e._v(": Do "),n("em",[e._v("not")]),e._v(" use\n                "),n("code",{staticClass:"language-javascript"},[e._v("loadLanguages()")]),e._v(" with\n                Webpack or another bundler, as this will cause Webpack to\n                include all languages and plugins. Use the babel plugin\n                described above.\n              ")]),e._v("\n              Add a service worker with the file "),n("code",[e._v("sw.js")]),e._v(" (following\n              sample from\n              "),n("a",{attrs:{href:"https://googlechrome.github.io/samples/service-worker/basic/",target:"_blank",rel:"noreferer noopener nofollow"}},[e._v("Google Chrome's Github")]),e._v(")\n              "),n("pre",[n("code",{staticClass:"language-js"},[e._v("const PRECACHE = 'precache-v1';\nconst RUNTIME = 'runtime';\n\nconst PRECACHE_URLS = [\n  'index.html',\n  './', // Alias for index.html\n];\n\nself.addEventListener('install', event => {\n  event.waitUntil(\n    caches.open(PRECACHE)\n      .then(cache => cache.addAll(PRECACHE_URLS))\n      .then(self.skipWaiting())\n  );\n});\n\nself.addEventListener('activate', event => {\n  const currentCaches = [PRECACHE, RUNTIME];\n  event.waitUntil(\n    caches.keys().then(cacheNames => {\n      return cacheNames.filter(cacheName => !currentCaches.includes(cacheName));\n    }).then(cachesToDelete => {\n      return Promise.all(cachesToDelete.map(cacheToDelete => {\n        return caches.delete(cacheToDelete);\n      }));\n    }).then(() => self.clients.claim())\n  );\n});\n\nself.addEventListener('fetch', event => {\n  // Skip cross-origin requests, like those for Google Analytics.\n  if (event.request.url.startsWith(self.location.origin)) {\n    event.respondWith(\n      caches.match(event.request).then(cachedResponse => {\n        if (cachedResponse) {\n          return cachedResponse;\n        }\n\n        return caches.open(RUNTIME).then(cache => {\n          return fetch(event.request).then(response => {\n            // Put a copy of the response in the runtime cache.\n            return cache.put(event.request, response.clone()).then(() => {\n              return response;\n            });\n          });\n        });\n      })\n    );\n  }\n});\n                            ")])]),e._v("\n              Register the service worker from your app:\n              "),n("pre",{staticClass:"language-js"},[n("code",[e._v("if ('serviceWorker' in navigator) {\n  navigator.serviceWorker.register('sw.js');\n}")])])]),e._v(" "),n("li",[e._v("\n              Now, open your app in Chrome, open\n              "),n("span",{staticClass:"hl"},[e._v("Dev Tools")]),e._v(" ->\n              "),n("span",{staticClass:"hl"},[e._v("Application")]),e._v(" tab ->\n              "),n("span",{staticClass:"hl"},[e._v("Manifest")]),e._v(", click on\n              "),n("span",{staticClass:"hl"},[e._v("Add to homescreen")]),e._v(".\n              "),n("img",{attrs:{src:"https://developers.google.com/web/tools/chrome-devtools/images/manifest.png",alt:"DevTools Add to Homescreen"}}),e._v(" "),n("div",[n("small",[n("em",[e._v("Image Courtesy: Google")])])])])])]),e._v(" "),n("li",[n("h2",[e._v("Enable push notifications")]),e._v(" "),n("ul",[n("li",[e._v("\n              Click on the info icon or the Secure lock icon before the URL in\n              the address bar. Then click on the\n              "),n("span",{staticClass:"hl"},[e._v("Site Settings")]),e._v(".\n              "),n("img",{attrs:{src:"https://i.imgur.com/xZayWdc.png",alt:"Chrome Site Settings",title:"Chrome Site Settings"}})]),e._v(" "),n("li",[e._v("\n              And allow push notifications.\n              "),n("div",[n("img",{attrs:{src:"https://i.imgur.com/71ld1Yl.png",alt:"Chrome Allow Push Notifications",title:"Chrome Allow Push Notifications"}})])])])]),e._v(" "),n("li",[n("h2",[e._v("Ask Chrome for the persisted storage permissions.")]),e._v(" "),n("pre",{staticClass:"language-js"},[n("code",[e._v('if (navigator.storage && navigator.storage.persist)\n  navigator.storage.persist().then(granted => {\n    if (granted)\n      console.log("Storage will not be cleared except by explicit user action");\n    else\n      console.log("Storage may be cleared by the UA under storage pressure.");\n  });')])])])])}],!1,null,null,null);t.default=component.exports}}]);